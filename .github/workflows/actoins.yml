name: Puffer Panel

on:
  workflow_dispatch:

permissions:
  actions: write
  contents: write

concurrency:
  group: pufferpanel
  cancel-in-progress: true

jobs:
  pufferpanel:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    steps:
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
          
      - name: Download latest backup from Releases (same repo)
        continue-on-error: true
        uses: robinraju/release-downloader@v1.11
        with:
          repository: MdAbuHassan19/KS_Hosting
          tag: backups
          fileName: "pufferpanel-backup-part*"
          out-file-path: "."
          token: ${{ secrets.DATA_TOKEN }}
          
      - name: Restore PufferPanel backup
        run: |
          if ls pufferpanel-backup-part* 1> /dev/null 2>&1; then
            echo "üì¶ Found backup parts. Reconstructing..."
            cat pufferpanel-backup-part* > pufferpanel-backup.tar.gz
            rm -rf $HOME/pufferpanel
            tar -xzf pufferpanel-backup.tar.gz -C $HOME
            echo "‚úÖ Backup restored successfully."
          else
            echo "‚ö†Ô∏è No backup found. Starting fresh."
          fi

      - name: Start PufferPanel
        run: |
          cd $HOME/pufferpanel
          docker-compose up -d
        
      # 11. Run LocalTunnel (keep alive)
      - name: Cloudflared Tunnel
        run: |
          # Download the latest binary
          curl -LO https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64

          # Make it executable
          chmod +x cloudflared-linux-amd64

          # Move it to a directory in PATH
          sudo mv cloudflared-linux-amd64 /usr/local/bin/cloudflared

          # Verify installation
          cloudflared --version
          sudo cloudflared service install eyJhIjoiZTJkZjY3MDI5ZWZlZTBmY2JhM2ExMjNjN2VmNTcxNTAiLCJ0IjoiYTAwMDU3NmMtYjA0Mi00NDQ4LTliOWYtMThjN2MzNTljZjkxIiwicyI6IlpUQm1NREprT0RJdE5tWTVNeTAwTldabUxUazROalV0Tm1Sa00yRm1NekJrWWpKbSJ9

      - name: Start Tmate (for debug - non-blocking)
        if: always()
        run: |
          set -euo pipefail
          curl -sL https://github.com/tmate-io/tmate/releases/latest/download/tmate-2.4.0-static-linux-amd64.tar.xz | tar -xJ
          sudo mv tmate-2.4.0-static-linux-amd64/tmate /usr/local/bin/ || true
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}' || true
          
      - name: Sleep for 20000s
        run: |
          sleep 20000

      - name: Error Fixing
        if: failure()
        run: |
          echo "‚è≥ Keeping panel alive for 20000 seconds..."
          sleep 555
      
                     
      - name: Backup Puffer Panel
        if: always()
        run: |
          echo "üì¶ Backing up PufferPanel..."
          cd $HOME
          sudo tar --exclude='pufferpanel/tmp/' --exclude='pufferpanel/cache/' \
           -czf pufferpanel-backup.tar.gz pufferpanel

          split -b 1750M -d -a 2 pufferpanel-backup.tar.gz pufferpanel-backup-part || true

          if ls pufferpanel-backup-part* 1> /dev/null 2>&1; then
            echo "üß© Split successful ‚Äî removing original archive..."
            rm -f pufferpanel-backup.tar.gz
          else
            echo "üìÅ Small backup ‚Äî renaming single file..."
            mv pufferpanel-backup.tar.gz pufferpanel-backup-part00
          fi

          echo "üì§ Moving backup files to workspace..."
          mv pufferpanel-backup-part* $GITHUB_WORKSPACE/

          echo "‚úÖ Backup complete and ready for upload."

      - name: Upload to GitHub Release (same repo)
        if: always()
        uses: softprops/action-gh-release@v1
        with:
          repository: MdAbuHassan19/KS_Hosting
          tag_name: backups
          name: "Latest Backup"
          body: "PufferPanel backup"
          files: pufferpanel-backup-part*
          token: ${{ secrets.DATA_TOKEN }}
          
      - name: Restart Workflow
        if: always()
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Puffer Panel
          ref: main
          repository: kshostnode2/fast-repo
          token: ${{ secrets.RUN_TOKEN }}
